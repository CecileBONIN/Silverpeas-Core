/**
 * Copyright (C) 2000 - 2012 Silverpeas
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * As a special exception to the terms and conditions of version 3.0 of
 * the GPL, you may redistribute this Program in connection with Free/Libre
 * Open Source Software ("FLOSS") applications as described in Silverpeas's
 * FLOSS exception.  You should have received a copy of the text describing
 * the FLOSS exception, and it is also available here:
 * "http://www.silverpeas.org/legal/licensing"
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <http://www.gnu.org/licenses/>.
 */
package com.stratelia.webactiv.servlets;


import java.io.IOException;
import java.io.OutputStream;
import java.io.StringReader;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;

import org.silverpeas.attachment.AttachmentServiceFactory;
import org.silverpeas.attachment.model.SimpleDocument;
import org.silverpeas.attachment.model.SimpleDocumentPK;
import org.silverpeas.attachment.web.OnlineAttachment;

import com.silverpeas.util.StringUtil;

import com.stratelia.silverpeas.silvertrace.SilverTrace;
import com.stratelia.silverpeas.versioning.model.DocumentVersion;
import com.stratelia.silverpeas.versioning.model.DocumentVersionPK;
import com.stratelia.silverpeas.versioning.util.VersioningUtil;
import com.stratelia.webactiv.util.FileRepositoryManager;
import com.stratelia.webactiv.util.ResourceLocator;

/**
 * Class declaration
 *
 * @author
 */
public class OnlineFileServer extends HttpServlet {

  private static final long serialVersionUID = -6153872618631360113L;

  @Override
  public void doGet(HttpServletRequest req, HttpServletResponse res)
      throws ServletException, IOException {
    doPost(req, res);
  }

  @Override
  public void doPost(HttpServletRequest req, HttpServletResponse res)
      throws ServletException, IOException {
    SilverTrace.info("peasUtil", "OnlineFileServer.doPost", "root.MSG_GEN_ENTER_METHOD");
    String mimeType = req.getParameter("MimeType");
    String sourceFile = req.getParameter("SourceFile");
    String directory = req.getParameter("Directory");
    String componentId = req.getParameter("ComponentId");
    OnlineFile onlineFile = new OnlineFile(mimeType, sourceFile, directory, componentId);
    String attachmentId = req.getParameter("attachmentId");
    String language = req.getParameter("lang");
    if (StringUtil.isDefined(attachmentId)) {
      // Check first if attachment exists
      SimpleDocument attachment = AttachmentServiceFactory.getAttachmentService()
          .searchAttachmentById(new SimpleDocumentPK(attachmentId), language);
      if (attachment != null) {
        onlineFile = new OnlineAttachment(attachment);
      }
    }

    String documentId = req.getParameter("DocumentId");
    if (StringUtil.isDefined(documentId)) {
      String versionId = req.getParameter("VersionId");
      VersioningUtil versioning = new VersioningUtil();
      DocumentVersionPK versionPK = new DocumentVersionPK(Integer.parseInt(versionId), "useless",
          componentId);

      DocumentVersion version = versioning.getDocumentVersion(versionPK);

      if (version != null) {
        mimeType = version.getMimeType();
        sourceFile = version.getPhysicalName();
        String[] path = new String[1];
        path[0] = "Versioning";
        directory = FileRepositoryManager.getRelativePath(path);
        onlineFile = new OnlineFile(mimeType, sourceFile, directory, componentId);
      }
    }
    res.setContentType(mimeType);
    display(res, onlineFile);
  }

  /**
   * This method writes the result of the preview action.
   *
   * @param res - The HttpServletResponse where the html code is write
   * @param htmlFilePath - the canonical path of the html document generated by the parser tools. if
   * this String is null that an exception had been catched the html document generated is empty !!
   * also, we display a warning html page
   */
  private void display(HttpServletResponse res, OnlineFile onlineFile) throws IOException {
    OutputStream output = res.getOutputStream();
    SilverTrace.info("peasUtil", "OnlineFileServer.display()",
        "root.MSG_GEN_ENTER_METHOD", " htmlFilePath " + onlineFile.getSourceFile());
    try {
      onlineFile.write(output);
    } catch (IOException ioex) {
      SilverTrace.warn("peasUtil", "OnlineFileServer.doPost", "root.EX_CANT_READ_FILE", "file name="
          + onlineFile.getSourceFile(), ioex);
      displayWarningHtmlCode(res);
    } finally {
      IOUtils.closeQuietly(output);
    }
  }

  private void displayWarningHtmlCode(HttpServletResponse res) throws IOException {
    OutputStream output = res.getOutputStream();
    ResourceLocator resourceLocator = new ResourceLocator(
        "com.stratelia.webactiv.util.peasUtil.multiLang.fileServerBundle", "");
    StringReader message = new StringReader(resourceLocator.getString("warning"));
    try {
      IOUtils.copy(message, output);
    } catch (Exception e) {
      SilverTrace.warn("peasUtil", "OnlineFileServer.displayWarningHtmlCode",
          "root.EX_CANT_READ_FILE", "warning properties");
    } finally {
      IOUtils.closeQuietly(output);
      IOUtils.closeQuietly(message);
    }
  }
}
